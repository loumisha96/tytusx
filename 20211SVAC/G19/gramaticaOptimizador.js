/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaOptimizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,8],$V6=[1,19],$V7=[6,15,17,18,19,20,23],$V8=[8,22],$V9=[8,10,22],$Va=[28,30,34],$Vb=[2,28],$Vc=[1,30],$Vd=[1,41],$Ve=[1,43],$Vf=[1,40],$Vg=[1,42],$Vh=[1,44],$Vi=[1,49],$Vj=[2,32],$Vk=[10,24,26,30,33,35,46,47,48,49,50,51,52,53],$Vl=[1,62],$Vm=[1,63],$Vn=[1,64],$Vo=[1,65],$Vp=[1,66],$Vq=[10,34],$Vr=[12,15,17,18,19,20,22,41,42,43,44],$Vs=[22,32,35,36,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"BMAIN":4,"BLOQUES":5,"EOF":6,"TIPO_FUNCTION":7,"main":8,"parIzq":9,"parDer":10,"llaIzq":11,"llaDer":12,"PARAMETROS":13,"INSTRUCCIONES":14,"void":15,"TIPO_DATO":16,"double":17,"float":18,"char":19,"int":20,"BLOQUE":21,"id":22,"include":23,"menor":24,"puntoH":25,"mayor":26,"IDS":27,"equal":28,"EXPR":29,"ptcoma":30,"corcheteIzq":31,"digits":32,"corcheteDer":33,"comma":34,"minus":35,"decimal":36,"cadena":37,"INSTRUCCION":38,"OPERADOR":39,"dospuntos":40,"goto":41,"return":42,"printf":43,"if":44,"COMPARADOR":45,"add":46,"div":47,"asterisk":48,"mod":49,"equalequal":50,"diferent":51,"mayorIgual":52,"menorIgual":53,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"main",9:"parIzq",10:"parDer",11:"llaIzq",12:"llaDer",15:"void",17:"double",18:"float",19:"char",20:"int",22:"id",23:"include",24:"menor",25:"puntoH",26:"mayor",28:"equal",30:"ptcoma",31:"corcheteIzq",32:"digits",33:"corcheteDer",34:"comma",35:"minus",36:"decimal",37:"cadena",40:"dospuntos",41:"goto",42:"return",43:"printf",44:"if",46:"add",47:"div",48:"asterisk",49:"mod",50:"equalequal",51:"diferent",52:"mayorIgual",53:"menorIgual"},
productions_: [0,[3,3],[3,4],[3,3],[3,2],[4,6],[4,7],[4,7],[4,8],[7,1],[7,1],[16,1],[16,1],[16,1],[16,1],[5,2],[5,1],[21,6],[21,7],[21,7],[21,8],[21,5],[21,5],[21,3],[21,6],[13,4],[13,2],[27,3],[27,1],[29,2],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[14,2],[14,1],[38,6],[38,4],[38,10],[38,10],[38,2],[38,3],[38,2],[38,3],[38,4],[38,5],[38,10],[38,9],[38,5],[38,3],[38,6],[39,1],[39,1],[39,1],[39,1],[39,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=[$$[$0-2]];  this.$=arr(this.$,$$[$0-1]);console.log("1", $$[$0-2]);/*this.$= unir1($$[$0-2],$$[$0-1]); */ return this.$
break;
case 2:
$$[$0-3].push($$[$0-2]);  this.$= arr($$[$0-3],$$[$0-1]); console.log("2",$$[$0-3]); /*this.$= unir2($$[$0-3],$$[$0-2],$$[$0-1]);*/return this.$
break;
case 3:
 $$[$0-2].push($$[$0-1]); this.$=$$[$0-2]; console.log("3**",$$[$0-2]);/*this.$ =unir3($$[$0-2],$$[$0-1]);*/ return this.$
break;
case 4:
 this.$=[$$[$0-1]];console.log("4",$$[$0-1]);/*this.$ =$$[$0-1].get3D();*/ return this.$
break;
case 5:
this.$ = new main(_$[$0-5].first_line, _$[$0-5].first_column, TipoBloque.MAIN, [],[], $$[$0-5])
break;
case 6:
this.$ = new main(_$[$0-6].first_line, _$[$0-6].first_column, TipoBloque.MAIN, [],new parametro(_$[$0-6].first_line, _$[$0-6].first_column,TipoBloque.PARAM, $$[$0-3]),$$[$0-6])
break;
case 7:
this.$ = new main(_$[$0-6].first_line, _$[$0-6].first_column, TipoBloque.MAIN, $$[$0-1],[],$$[$0-6])
break;
case 8:
this.$ = new main(_$[$0-7].first_line, _$[$0-7].first_column, TipoBloque.MAIN, $$[$0-1],new parametro(_$[$0-7].first_line, _$[$0-7].first_column,TipoBloque.PARAM, $$[$0-4]),$$[$0-7])
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 32: case 33: case 34: case 35: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63:
this.$=$$[$0]
break;
case 15: case 36:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 16: case 28: case 37:
this.$=[$$[$0]]
break;
case 17:
this.$ = new funcion(_$[$0-5].first_line, _$[$0-5].first_column, TipoBloque.FUNCTION, [],[],$$[$0-4], $$[$0-5])
break;
case 18:
this.$ = new funcion(_$[$0-6].first_line, _$[$0-6].first_column, TipoBloque.FUNCTION, [],new parametro(_$[$0-6].first_line, _$[$0-6].first_column,TipoBloque.PARAM, $$[$0-3]),$$[$0-5], $$[$0-6])
break;
case 19:
this.$ = new funcion(_$[$0-6].first_line, _$[$0-6].first_column, TipoBloque.FUNCTION, $$[$0-1],[],$$[$0-5],$$[$0-6])
break;
case 20:
this.$ = new funcion(_$[$0-7].first_line, _$[$0-7].first_column, TipoBloque.FUNCTION, $$[$0-1],new parametro(_$[$0-7].first_line, _$[$0-7].first_column,TipoBloque.PARAM, $$[$0-4]),$$[$0-6], $$[$0-7])
break;
case 21:
this.$= new include(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4] +"<"+$$[$0-2]+".h>\n", TipoBloque.INCLUDE)
break;
case 22: case 50:
this.$ = new declaracionAsig(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1],$$[$0-3],TipoBloque.DECLARACION_ASIG, $$[$0-4])
break;
case 23: case 51:
this.$ = new declaracionS(_$[$0-2].first_line, _$[$0-2].first_column, TipoBloque.DECLARACION_S, $$[$0-2], $$[$0-1])
break;
case 24: case 52:
this.$ = new declaracionArray(_$[$0-5].first_line, _$[$0-5].first_column, TipoBloque.DECLARACION_ARREGLO, $$[$0-4], $$[$0-5],$$[$0-2])
break;
case 25:
$$[$0-3].push($$[$0-1]); $$[$0-3].push($$[$0]); this.$ =$$[$0-3]
break;
case 26:
this.$=[$$[$0-1],$$[$0]]
break;
case 27:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 29: case 30: case 31:
this.$="-"+$$[$0]
break;
case 38:
this.$= new asignacionDosExpr(_$[$0-5].first_line, _$[$0-5].first_column, tipoInstr.ASIGNACION_DOS_EXPR,$$[$0-5], $$[$0-3],$$[$0-2],$$[$0-1])
break;
case 39:
this.$= new asignacionOp(_$[$0-3].first_line, _$[$0-3].first_column,$$[$0-3], $$[$0-1], tipoInstr.ASIGNACION_OPERACION) 
break;
case 40:
this.$ = new asignacionArray(_$[$0-9].first_line, _$[$0-9].first_column, tipoInstr.ASIGNACION_ARREGLO,$$[$0-9],$$[$0-6], $$[$0-4], $$[$0-1])
break;
case 41:
this.$=  new asignarIdArray(_$[$0-9].first_line, _$[$0-9].first_column,tipoInstr.ASIGNACION_ID_ARRAY, $$[$0-9], $$[$0-7], $$[$0-4],$$[$0-2])
break;
case 42:
this.$ = new etiqueta(_$[$0-1].first_line, _$[$0-1].first_column,tipoInstr.ETIQUETA, $$[$0-1])
break;
case 43:
this.$= new goto(_$[$0-2].first_line, _$[$0-2].first_column, tipoInstr.GOTO, $$[$0-1])
break;
case 44:
this.$= new Return(_$[$0-1].first_line, _$[$0-1].first_column, "return;\n", tipoInstr.RETURN)
break;
case 45:
this.$= new Return(_$[$0-2].first_line, _$[$0-2].first_column, "return "+ $$[$0-1]+";\n", tipoInstr.RETURN)
break;
case 46:
this.$ = new call(_$[$0-3].first_line, _$[$0-3].first_column, tipoInstr.CALL, [], $$[$0-3])
break;
case 47:
this.$ = new call(_$[$0-4].first_line, _$[$0-4].first_column, tipoInstr.CALL, $$[$0-2], $$[$0-4])
break;
case 48:
this.$ = new print(_$[$0-9].first_line, _$[$0-9].first_column, tipoInstr.PRINT, "printf(" + $$[$0-7] + ", (" + $$[$0-4] + ")" + $$[$0-2] + ");\n")
break;
case 49:
this.$= new _if(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-1], tipoInstr.IF)
break;
}
},
table: [{3:1,4:2,5:3,7:4,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:5,23:$V5},{1:[3]},{5:13,6:[1,14],7:15,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:5,23:$V5},{4:16,7:4,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:17,23:$V5},{8:[1,18],22:$V6,27:20},o($V7,[2,16]),o($V8,[2,9]),o($V8,[2,10]),{24:[1,21]},o($V9,[2,11]),o($V9,[2,12]),o($V9,[2,13]),o($V9,[2,14]),{6:[1,22],7:15,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:17,23:$V5},{1:[2,4]},{22:$V6,27:20},{5:23,6:[1,24],7:15,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:5,23:$V5},o($V7,[2,15]),{9:[1,25]},o($Va,$Vb,{9:[1,26],31:[1,27]}),{28:[1,28],30:[1,29],34:$Vc},{22:[1,31]},{1:[2,1]},{6:[1,32],7:15,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,21:17,23:$V5},{1:[2,3]},{10:[1,33],13:34,16:35,17:$V1,18:$V2,19:$V3,20:$V4},{10:[1,36],13:37,16:35,17:$V1,18:$V2,19:$V3,20:$V4},{32:[1,38]},{22:$Vd,29:39,32:$Ve,35:$Vf,36:$Vg,37:$Vh},o($V7,[2,23]),{22:[1,45]},{25:[1,46]},{1:[2,2]},{11:[1,47]},{10:[1,48],34:$Vi},{22:[1,50]},{11:[1,51]},{10:[1,52],34:$Vi},{33:[1,53]},{30:[1,54]},{22:[1,55],32:[1,57],36:[1,56]},o([10,24,26,30,33,50,51,52,53],$Vj),o($Vk,[2,33]),o($Vk,[2,34]),o($Vk,[2,35]),o([10,28,30,34],[2,27]),{26:[1,58]},{7:67,12:[1,59],14:60,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:61,41:$Vm,42:$Vn,43:$Vo,44:$Vp},{11:[1,68]},{16:69,17:$V1,18:$V2,19:$V3,20:$V4},o($Vq,[2,26]),{7:67,12:[1,70],14:71,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:61,41:$Vm,42:$Vn,43:$Vo,44:$Vp},{11:[1,72]},{30:[1,73]},o($V7,[2,22]),o($Vk,[2,29]),o($Vk,[2,30]),o($Vk,[2,31]),o($V7,[2,21]),o($V7,[2,5]),{7:67,12:[1,74],15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:75,41:$Vm,42:$Vn,43:$Vo,44:$Vp},o($Vr,[2,37]),{9:[1,79],28:[1,76],31:[1,77],40:[1,78]},{22:[1,80]},{22:$Vd,29:82,30:[1,81],32:$Ve,35:$Vf,36:$Vg,37:$Vh},{9:[1,83]},{9:[1,84]},{22:[1,86],27:85},{7:67,12:[1,87],14:88,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:61,41:$Vm,42:$Vn,43:$Vo,44:$Vp},{22:[1,89]},o($V7,[2,17]),{7:67,12:[1,90],15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:75,41:$Vm,42:$Vn,43:$Vo,44:$Vp},{7:67,12:[1,91],14:92,15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:61,41:$Vm,42:$Vn,43:$Vo,44:$Vp},o($V7,[2,24]),o($V7,[2,7]),o($Vr,[2,36]),{22:[1,94],29:93,32:$Ve,35:$Vf,36:$Vg,37:$Vh},{9:[1,95]},o($Vr,[2,42]),{10:[1,96],22:[1,98],27:97},{30:[1,99]},o($Vr,[2,44]),{30:[1,100]},{37:[1,101]},{22:$Vd,29:102,32:$Ve,35:$Vf,36:$Vg,37:$Vh},{28:[1,103],30:[1,104],34:$Vc},o($Va,$Vb,{31:[1,105]}),o($V7,[2,6]),{7:67,12:[1,106],15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:75,41:$Vm,42:$Vn,43:$Vo,44:$Vp},o($Vq,[2,25]),o($V7,[2,19]),o($V7,[2,18]),{7:67,12:[1,107],15:$V0,16:7,17:$V1,18:$V2,19:$V3,20:$V4,22:$Vl,38:75,41:$Vm,42:$Vn,43:$Vo,44:$Vp},{30:[1,109],35:[1,111],39:108,46:[1,110],47:[1,112],48:[1,113],49:[1,114]},o([30,35,46,47,48,49],$Vj,{31:[1,115]}),{16:116,17:$V1,18:$V2,19:$V3,20:$V4},{30:[1,117]},{10:[1,118],34:$Vc},o($Vq,$Vb),o($Vr,[2,43]),o($Vr,[2,45]),{34:[1,119]},{24:[1,126],26:[1,125],45:120,50:[1,121],51:[1,122],52:[1,123],53:[1,124]},{22:$Vd,29:127,32:$Ve,35:$Vf,36:$Vg,37:$Vh},o($Vr,[2,51]),{32:[1,128]},o($V7,[2,8]),o($V7,[2,20]),{22:$Vd,29:129,32:$Ve,35:$Vf,36:$Vg,37:$Vh},o($Vr,[2,39]),o($Vs,[2,53]),o($Vs,[2,54]),o($Vs,[2,55]),o($Vs,[2,56]),o($Vs,[2,57]),{9:[1,130]},{10:[1,131]},o($Vr,[2,46]),{30:[1,132]},{9:[1,133]},{22:$Vd,29:134,32:$Ve,35:$Vf,36:$Vg,37:$Vh},o($Vs,[2,58]),o($Vs,[2,59]),o($Vs,[2,60]),o($Vs,[2,61]),o($Vs,[2,62]),o($Vs,[2,63]),{30:[1,135]},{33:[1,136]},{30:[1,137]},{16:138,17:$V1,18:$V2,19:$V3,20:$V4},{22:$Vd,29:139,32:$Ve,35:$Vf,36:$Vg,37:$Vh},o($Vr,[2,47]),{16:140,17:$V1,18:$V2,19:$V3,20:$V4},{10:[1,141]},o($Vr,[2,50]),{30:[1,142]},o($Vr,[2,38]),{10:[1,143]},{33:[1,144]},{10:[1,145]},{41:[1,146]},o($Vr,[2,52]),{22:$Vd,29:147,32:$Ve,35:$Vf,36:$Vg,37:$Vh},{28:[1,148]},{22:$Vd,29:149,32:$Ve,35:$Vf,36:$Vg,37:$Vh},{22:[1,150]},{33:[1,151]},{22:$Vd,29:152,32:$Ve,35:$Vf,36:$Vg,37:$Vh},{10:[1,153]},{30:[1,154]},{30:[1,155]},{30:[1,156]},{30:[1,157]},o($Vr,[2,49]),o($Vr,[2,41]),o($Vr,[2,40]),o($Vr,[2,48])],
defaultActions: {14:[2,4],22:[2,1],24:[2,3],32:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 25;
break;
case 5:return 48;
break;
case 6:return 47;
break;
case 7:return 9;
break;
case 8:return 10;
break;
case 9:return 11;
break;
case 10:return 12;
break;
case 11:return 31;
break;
case 12:return 33;
break;
case 13:return 49;
break;
case 14:return 30;
break;
case 15:return 40;
break;
case 16:return 46;
break;
case 17:return 34;
break;
case 18:return 35;
break;
case 19:return 50
break;
case 20:return 28;
break;
case 21:return 51;
break;
case 22:return 52;
break;
case 23:return 53;
break;
case 24:return 24;
break;
case 25:return 26;
break;
case 26:return 23;
break;
case 27:return 41;
break;
case 28:return 44;
break;
case 29:return 18;
break;
case 30:return 20;
break;
case 31:return 19;
break;
case 32:return 17;
break;
case 33:return 8;
break;
case 34:return 43;
break;
case 35:return 42;
break;
case 36:return 15;
break;
case 37:
break;
case 38:
break;
case 39:return  'digits';
break;
case 40:return  'decimal';
break;
case 41:return 22;
break;
case 42:return 37;
break;
case 43:return 6;
break;
case 44:
        console.error('Error');

break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\.h\b)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:%)/i,/^(?:;)/i,/^(?::)/i,/^(?:\+)/i,/^(?:,)/i,/^(?:-)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:#include\b)/i,/^(?:goto\b)/i,/^(?:if\b)/i,/^(?:float\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:main\b)/i,/^(?:printf\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[A-Za-z_][A-Za-z_0-9]*)/i,/^(?:("({EscapeQuot}|[^"])*")|('\(\{EscapeApos\}\|\[\^'\]\)\*'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaOptimizador;
exports.Parser = gramaticaOptimizador.Parser;
exports.parse = function () { return gramaticaOptimizador.parse.apply(gramaticaOptimizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}